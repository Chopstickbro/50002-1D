module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig switchToZVN;
  sig switchToTestUnit;
  sig displayOutput[8];
  sig displayz[1];
  sig displayn[1];
  sig displayv[1];
  
  alu alu;
    
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      multi_seven_seg seg (#DIGITS(3));
      test_unit test_unit;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    switchToZVN = io_button[1];
    switchToTestUnit = io_dip[2][6];
    
    // inputs of alu
    alu.alufn = io_dip[2][5:0];
    alu.a = io_dip[0];
    alu.b = io_dip[1];
    // show what the inputs are
    io_led[0] = io_dip[0];
    io_led[1] = io_dip[1];
    seg.values[0] = io_dip[2][3:0];
    seg.values[1] = io_dip[2][5:4];
    io_seg = ~seg.seg;
    io_sel[3:2] = ~seg.sel[1:0];
    io_sel[1:0] = 2b11;
    displayOutput = alu.out;
    displayz = alu.z;
    displayv = alu.v;
    displayn = alu.n;
    
    test_unit.simulate_error = io_dip[2][7];
    // change outputs to what the test unit is doing
    if (switchToTestUnit) {
      io_led[0] = test_unit.out_a;
      io_led[1] = test_unit.out_b;
      seg.values[0] = test_unit.operation[3:0];
      seg.values[1] = test_unit.operation[5:4];
      displayOutput = test_unit.result;
      displayz = test_unit.out_z;
      displayv = test_unit.out_v;
      displayn = test_unit.out_n;
    }
    
    // show result when button not pressed
    // show z, v and n when button pressed
    if (!switchToZVN) {
      io_led[2] = displayOutput;
    } else {
      io_led[2][0] = displayz;
      io_led[2][1] = displayv;
      io_led[2][2] = displayn;
      io_led[2][7:3] = 0;
    }
   }
}